1.
a. 	ARM. file code1 shows that the executable runs on arm architectue
b.	number at the beginning of a file that gives the file type
	7f45 4c46
c.	bash: ./re-assignment2.pdf: Permission denied
d.	the file signature of pdf and elf format are different


2.

a. No
b.  
code2_1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=20d794253b8b383d8c32cd8b5239aa541a8a7408, not stripped

code2_2: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=61e48b0fa465600a4982e40a2a294208f964095c, not stripped

code2_3: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=20d794253b8b383d8c32cd8b5239aa541a8a7408, stripped


c.  
code2_2 is statistically linked which requires more memory and disk space than dynamically linked files such as code2_1

d. 
Compiled binary files have debugging information. These are not stripped files. Stripped files have this debugging information removed and thus are smaller in size. 
Running file <filename> shows if the executables are stripped or not stripped
code2_1 gives the disassembly but code2_3 says 'no symbol table is loaded' and does not give the disassembly as it does not contain any debugging information


3. 
a.
code3 prints "This statement should get printed!", then goes to label1 and prints "This again will get printed!\n". It skips the middle print statement.
b.

c.
The main function of the original code uses a stack. It pushes the values onto the stack and then calls puts.
My code uses a system call to print the messages directly.

d.
No

4.	
a.
Infinite loop that jumps to the same statement. 
b. 

00400000-00401000 r-xp 00000000 08:14 1055455                            /home/ryan_rozario/smp_crypto/ass2/Assignment/programs/code4
00600000-00601000 r--p 00000000 08:14 1055455                            /home/ryan_rozario/smp_crypto/ass2/Assignment/programs/code4
00601000-00602000 rw-p 00001000 08:14 1055455                            /home/ryan_rozario/smp_crypto/ass2/Assignment/programs/code4
7ffff79e4000-7ffff7bcb000 r-xp 00000000 08:14 9180955                    /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7bcb000-7ffff7dcb000 ---p 001e7000 08:14 9180955                    /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dcb000-7ffff7dcf000 r--p 001e7000 08:14 9180955                    /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dcf000-7ffff7dd1000 rw-p 001eb000 08:14 9180955                    /lib/x86_64-linux-gnu/libc-2.27.so
7ffff7dd1000-7ffff7dd5000 rw-p 00000000 00:00 0 
7ffff7dd5000-7ffff7dfc000 r-xp 00000000 08:14 9180950                    /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7fd9000-7ffff7fdb000 rw-p 00000000 00:00 0 
7ffff7ff7000-7ffff7ffa000 r--p 00000000 00:00 0                          [vvar]
7ffff7ffa000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00027000 08:14 9180950                    /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7ffd000-7ffff7ffe000 rw-p 00028000 08:14 9180950                    /lib/x86_64-linux-gnu/ld-2.27.so
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]


c. 

text section: 7ffffffde000-7ffffffff000
data section: 7ffff7ffe000-7ffff7fff000

d. 
rwxp: read write execute private
There is no -wxp permission in any address space.
You cannot execute something if you do not have read permissions.
This also prevents a malacious user from writing any instructions and then executing them.
So all executable address spaces only have read permissions and not write permissions.

e.
No
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]

7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]


 




5. 
a.
123hwovoe2oi35945829dp2eovwibfou23rrouthy3oioh
va545}4q[0v7[c7pp5jc[f7pp7v[0p[Pl5 y
owueehru232t30yfubu neoijoiwhviuqknciubiui  
orhgouvcwoieji9u408ty28493ru83hvoiciqqwoijouh


b.
re101y0u_4r3_g3tt1ng_b3tt3r_4t_Th1$}

6.
a.
A list of numbers from 0 to one less than the number inputed. Followed on the next line by "Output = <number inputted>"

b.
It works the same way but the code is different.

c.
Code6 has two functions.
call_me_1 takes a number and prints the number
call_me_2 takes a number and returns the same number

gdb-peda$ disass main
Dump of assembler code for function main:
   0x00000000004005f6 <+0>:	push   rbp
   0x00000000004005f7 <+1>:	mov    rbp,rsp
   0x00000000004005fa <+4>:	sub    rsp,0x10
   0x00000000004005fe <+8>:	mov    rax,QWORD PTR fs:0x28
   0x0000000000400607 <+17>:	mov    QWORD PTR [rbp-0x8],rax
   0x000000000040060b <+21>:	xor    eax,eax
   0x000000000040060d <+23>:	mov    edi,0x400744
   0x0000000000400612 <+28>:	mov    eax,0x0
   0x0000000000400617 <+33>:	call   0x4004c0 <printf@plt>
   0x000000000040061c <+38>:	lea    rax,[rbp-0x10]
   0x0000000000400620 <+42>:	mov    rsi,rax
   0x0000000000400623 <+45>:	mov    edi,0x400756
   0x0000000000400628 <+50>:	mov    eax,0x0
   0x000000000040062d <+55>:	call   0x4004e0 <__isoc99_scanf@plt>
   0x0000000000400632 <+60>:	mov    DWORD PTR [rbp-0xc],0x0
   0x0000000000400639 <+67>:	jmp    0x400649 <main+83>
   0x000000000040063b <+69>:	mov    eax,0x0
   0x0000000000400640 <+74>:	call   0x400687 <call_me_1>
   0x0000000000400645 <+79>:	add    DWORD PTR [rbp-0xc],0x1
   0x0000000000400649 <+83>:	mov    eax,DWORD PTR [rbp-0x10]
   0x000000000040064c <+86>:	cmp    DWORD PTR [rbp-0xc],eax
   0x000000000040064f <+89>:	jl     0x40063b <main+69>
   0x0000000000400651 <+91>:	mov    eax,0x0
   0x0000000000400656 <+96>:	call   0x4006b4 <call_me_2>
   0x000000000040065b <+101>:	mov    esi,eax
   0x000000000040065d <+103>:	mov    edi,0x400759
   0x0000000000400662 <+108>:	mov    eax,0x0
   0x0000000000400667 <+113>:	call   0x4004c0 <printf@plt>
   0x000000000040066c <+118>:	mov    eax,0x0
   0x0000000000400671 <+123>:	mov    rdx,QWORD PTR [rbp-0x8]
   0x0000000000400675 <+127>:	xor    rdx,QWORD PTR fs:0x28
   0x000000000040067e <+136>:	je     0x400685 <main+143>
   0x0000000000400680 <+138>:	call   0x4004b0 <__stack_chk_fail@plt>
   0x0000000000400685 <+143>:	leave  
   0x0000000000400686 <+144>:	ret    
End of assembler dump.
gdb-peda$ b call_me_1
Breakpoint 2 at 0x40068b
gdb-peda$ disass call_me_1
Dump of assembler code for function call_me_1:
   0x0000000000400687 <+0>:	push   rbp
   0x0000000000400688 <+1>:	mov    rbp,rsp
   0x000000000040068b <+4>:	mov    eax,DWORD PTR [rip+0x2009bb]        # 0x60104c <s>
   0x0000000000400691 <+10>:	mov    esi,eax
   0x0000000000400693 <+12>:	mov    edi,0x400766
   0x0000000000400698 <+17>:	mov    eax,0x0
   0x000000000040069d <+22>:	call   0x4004c0 <printf@plt>
   0x00000000004006a2 <+27>:	mov    eax,DWORD PTR [rip+0x2009a4]        # 0x60104c <s>
   0x00000000004006a8 <+33>:	add    eax,0x1
   0x00000000004006ab <+36>:	mov    DWORD PTR [rip+0x20099b],eax        # 0x60104c <s>
   0x00000000004006b1 <+42>:	nop
   0x00000000004006b2 <+43>:	pop    rbp
   0x00000000004006b3 <+44>:	ret    
End of assembler dump.
gdb-peda$ b call_me_2
Breakpoint 3 at 0x4006b8
gdb-peda$ disass call_me_2
Dump of assembler code for function call_me_2:
   0x00000000004006b4 <+0>:	push   rbp
   0x00000000004006b5 <+1>:	mov    rbp,rsp
   0x00000000004006b8 <+4>:	mov    eax,DWORD PTR [rip+0x20098e]        # 0x60104c <s>
   0x00000000004006be <+10>:	pop    rbp
   0x00000000004006bf <+11>:	ret    
End of assembler dump.

Construction of stack frame
push   rbp
mov    rbp,rsp

Destruction of stack frame
pop    rbp


d.
The nop instruction does nothing but it takes some amount of time.
We can find it in the function call_me_1

e.

7.
a.
Arguments are passed through the registers in the order rsi,rsi,rdx,rcx,r8,r9.

b.
run the code with 9 command line arguments
flag = re101{y0u_4r3_g00d!!}

c.
-Use strings code7
-In gdb use the command print (char*)<address> : print (char*)0x400624





















