1a.This executable runs on 32 bit (x86) architecture as all the registers used are of size 32 bits or lesser and the lahf command is avaiable only in 32 bit architecture.
[comment by Adwaith]: This file is a 32-bit ARM executable and can be found out by file command. ($ file code1) will give all the details regarding the file. readelf command can also be used.
[changed]:using the file command tells us that code1 is a ELF 32bit LSB executable

1b. Magic numbers are the first few bytes of a file which are unique to a particular file type. These unique bits are referred to as magic numbers,  also sometimes referred to as a  file signature. The magic number of code1 is 7f 45 4c 46 01 01 01 00.

1c. I tried to run a PDF file as an executable file and it gave the following error
'bash: ./SMP_Week_0.pdf: Permission denied'
Upon using chmod and adding execute permissions, I still got errors like 'no job control' and 'command not found'.

1d. We can notice that the magic numbers of a PDF and an executable are not the same which implies that the system does not treat both the files in the same way which means that a PDF cannot be run like an executable.




2a. No difference was found on running the three files.

2b. 
code2_1 is dynamically linked, not stripped.
code2_2 is statically linked, not stripped.
code2_3 is dynamically linked, stripped.

2c. The big size difference between code2_1 and code2_2 is because code2_2 has been statically linked. In static linking, the executable is linked by programs called linkers or link editors during compile time and all the libraries used are copied into the final executable thus increasing it's size. In dynamic linking, only the names of the libraries are placed in the executable and the linking is done by the operating system during runtime.

2d. code2_1 has not been stripped whereas code2_3 has been stripped. Here, to strip means to reduce the space taken by removing extra symbols and extra memory used to store stuff like debugging information. Due to the stripping, code2_3 is smaller than code2_1.




3a. (Nothing to say here other than proper expected execution!)

3b. 
section .data:

    ;    str1: db "This statement should get printed!",'0xa','0x0' 
     ;   str2: db "This statement should not get printed :(",'0xa','0x0' 
      ;  str3: db "This again will get printed!",'0xa','0x0' 
[changed]: str1: db "This statement should get printed!",0xa,0x0
        str2: db "This statement should not get printed :(",0xa,0x0
        str3: db "This statement will get printed!",0xa,0x0 
        len1: equ $-str1
        len2: equ $-str2
        len3: equ $-str3

section .text:
        global _start

_start:
        mov rax, 0x04
        mov rbx, 0x01
        lea rcx, [str1]
        mov rdx, len1
        int 0x80
        
        jmp label
        
        mov rax, 0x04
        mov rbx, 0x01
        lea rcx, [str2]
        mov rdx, len2
        int 0x80

  label:mov rax, 0x04
        mov rbx, 0x01
        lea rcx, [str3]
        mov rdx, len3
        int 0x80

        mov rax, 0x01
        mov rbx, 0x00
        int 0x80

[comment by Adwaith]: Check the code once again. Logic is correct, but null character at the end of the string should be put as 0x00 or just 0 and not '0x0'. '0x0' is a string in itself. So, the above strings are not null-terminated. Run the code and you will be able to figure it out from the output you get.

3c. The second print statement has been removed from the assembly code.

3d. The compiler has removed unnecessary parts of the code, i.e. the second print statement due to the unconditional print statement and replaced it by a 'nop' or no-operation.

[comment by Adwaith]: The compiler has optimized the code. Optimization was the word we were looking for.



4a. code4 is an example of an infinite loop wherein the jump statement continuosly points to itself thus never stops transferring the control to itself again and again.

4b.
[changed:added first three lines]:
00400000-00401000 r-xp 00000000 08:07 1577022                            /home/rohit/SummerProjects18/RE-Cryptography/Session-3/Assignment/programs/assignment2_programs/code4
00600000-00601000 r--p 00000000 08:07 1577022                            /home/rohit/SummerProjects18/RE-Cryptography/Session-3/Assignment/programs/assignment2_programs/code4
00601000-00602000 rw-p 00001000 08:07 1577022                            /home/rohit/SummerProjects18/RE-Cryptography/Session-3/Assignment/programs/assignment2_programs/code4
7ffff79f5000-7ffff7bcb000 r-xp 00000000 08:07 2621527                    /lib/x86_64-linux-gnu/libc-2.26.so
7ffff7bcb000-7ffff7dcb000 ---p 001d6000 08:07 2621527                    /lib/x86_64-linux-gnu/libc-2.26.so
7ffff7dcb000-7ffff7dcf000 r--p 001d6000 08:07 2621527                    /lib/x86_64-linux-gnu/libc-2.26.so
7ffff7dcf000-7ffff7dd1000 rw-p 001da000 08:07 2621527                    /lib/x86_64-linux-gnu/libc-2.26.so
7ffff7dd1000-7ffff7dd5000 rw-p 00000000 00:00 0 
7ffff7dd5000-7ffff7dfc000 r-xp 00000000 08:07 2621523                    /lib/x86_64-linux-gnu/ld-2.26.so
7ffff7fcd000-7ffff7fcf000 rw-p 00000000 00:00 0 
7ffff7ff7000-7ffff7ffa000 r--p 00000000 00:00 0                          [vvar]
7ffff7ffa000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
7ffff7ffc000-7ffff7ffd000 r--p 00027000 08:07 2621523                    /lib/x86_64-linux-gnu/ld-2.26.so
7ffff7ffd000-7ffff7ffe000 rw-p 00028000 08:07 2621523                    /lib/x86_64-linux-gnu/ld-2.26.so
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
[comment by Adwaith]: Were these the only entries? There should have been other entries at the beginning. Report all the entries.

4c. 7ffffffde000-7ffffffff000 is for .text section and 7ffff7ffe000-7ffff7fff000 is for .data section since the memory location 0x7fffffffdfd8 is used to store the pushed value of rbp.
[comment by Adwaith]: Check this once again. Just compare the addresses of .text(or the main function) in gdb and these addresses. Do they match?
[changed]: 00400000-00401000 is the memory allocated for text segment and 7ffff7ff7000-7ffff7ffa000 is allocated for the data segment. 

4d. I don't find a file with permissions -wxp. I think it's so because that part of the memory would be useless in runtime if you could only store data in it and not read back from it.
[comment by Adwaith]: That's a good observation! . Will you find a address space with rwxp permissions?
[changed]:I don't find an address space with rwxp permissions either. I think it's so because a each address space has it's own function and hence there is no need for an address space to have all the permissions.

4e.
First time : 
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0

Second time:
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0

Third time:
7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0

The stack memory allocated remained same everytime.




5a. 
/lib64/ld-linux-x86-64.so.2
libc.so.6
__libc_start_main
__gmon_start_
Fatal error
I/O device not found
Usage: $ ./code1 <number1> <number2>
Kernel Error
System call Error

5b.
#include<stdio.h>
#include<string.h>
void main()
{
    char str[100];
    scanf("%s",str);
    int i,j;
    for(j=1;j<10;j++)
    {
    for(i=0;i<strlen(str);i++)
    {
        char ch=str[i];
        if(ch!=' ' && ch!='\n')
            ch=ch^j;
        printf("%c",ch);
    }
    printf("\n");
    }
}

re101 you are getting better at thi

6a.
#include<stdio.h>
printf("\nEnter a number: ");
int n;
scanf("%d",&n);
int i=0;
for(i=0;i<n;i++)
    printf("%d\n",i);
printf("Output = %d\n",n);

6b. No, they're not the same. code6 consists of a recursive function call_me_1 which prints the values from 0 till the number entered excluding it. call_me_2 only loads the entered number into the rax register and passes the control back to main function to print the number.
[comment by Adwaith]: GO through the disassembly of all the functions once again. 
[changed]:the call_me_1 function is called from main with the number to be printed as parameter and the function prints it. 

6c. There are two functions namely 'call_me_1' and 'call_me_2'.
The two instructions:
push rbp
mov rbp, rsp
sub rsp, 0x10
make up the construction of the stack frame.
mov rbp,rsp
pop rbp makes up the destruction of the stack frame.

6d. 'nop' instruction is a no-operation instruction. It means that there are not instructions to be executed in that memory location. The nop function was found in call_me_1 function.






7a. In x86-64, the arguments/ their addresses in the stack are stored in the registers rdi, rsi, rdx, rdc, r8, r9 (respective order) and the function is made which gets these values. 
In x86, the arguments/ their addresses are stored in the stack (in reverse order of how they are in the function call) and the function call is made.

7b. re101 you are good
We should pass nine arguments while executing the code for it to print the flag.

7c. We can either pass nine arguments while executing the code or use the strings function to find the flag.

    







8a. iterative - 104 instructions and 139264 bytes of stack memory
    recursive - 177 instructions and 139264 bytes of stack memory
[changed]:iterative uses 0 bytes of stack memory and recursive uses 464 bytes of stack memory.


8b. Consider n>=1
No. of instructions:
iterative - 5+9n 
recursive - 1+16n
i)  n=7 => iter=68 and rec=113
ii) n=4 => iter=41 and rec=65
iii)n=3 => iter=32 and rec=49
iv) n=2 => iter=23 and rec=33
v)  n=1 => iter=14 and rec=17

Memory in stack:
iterative - 0
recursive - 48n-16

8c. Based on the number of instructions run and stack memory used, I think iterative version of factorial is better.






9a. code9 prints the first parameter given as its output.

9d.
Return address of print_buffer function (by static analysis) : 0x00005555555547ae
rbp value pushed when print_buffer is executed (by dynamic analysis) : 0x5555555547f0
return address of print_buffer (by dynamic analysis) : 0x5555555547ae

Yes, both the return addresses are the same.

Any string of length greater than 100 characters will cause a segmentation fault.

The segmentation fault was caused because the entered was greater than the size of the buffer and the extra characters of the string overwrote the return address of the function print_buffer in the stack.






10a.
 warning: implicit declaration of function ‘gets’; did you mean ‘fgets’? [-Wimplicit-function-declaration]
 warning: the `gets' function is dangerous and should not be used.

10b. rbp value pushed at the beginning is 0x5555555546d0.
The return address is 0x7ffff7a161c1.

10c. A string of length greater than or equal to 120 causes segmentation fault.
[comment by Adwaith]: Here, though the buffer size is 100, can you think why it is segfaulting at 120 bytes? 
[changed]:The program segfaults only after 120 characters though the buffer is only of 100 characters because the return address is strored after the 120th character which when changed messed up the flow of the program, although I'm not sure what is stored in those 20 bytes inbetween.

10d. The program segfaults only if I enter a string of length greater than or equal to 120.

10e. The length of smallest input which can cause segfault is 120.
The reason is that last few bits of the return were changed by the large input in the stack which caused the change in the return address and hence a segfault.






11a. Yes

11b. They did for some inputs because the size of the input was more than the space allocated for it which caused it to overwrite other information in the stack thus leading to loss of information and unintended addresses/executions and segmentation fault.
[comment by Adwaith]: Good one!






12a. A string of minimum length 121 can cause segfault.

12b. A string of minimum length 108 can cause segfault.

12c. Without the stack protector, the error message is just 'Segmentation fault (core dumped)' but with the stack protector, we get the error message as :
*** stack smashing detected ***: <unknown> terminated
Aborted (core dumped)

12d. I think the stack protector detects if any of the information stored in the stack is being overwritten unintentionally.

12e. 
The instructions 
mov    rax,QWORD PTR fs:0x28
mov    QWORD PTR [rbp-0x8],rax
xor    eax,eax
before storing the string in the stack and the 
instructions 
mov    rax,QWORD PTR [rbp-0x8]
xor    rax,QWORD PTR fs:0x28
je     0x764 <func1+85>
call   0x5b0 <__stack_chk_fail@plt>
at the end of the program are extra in code12_2 as compared to code12_1

12f. The segment registers are used to store the basically used to ensure that the information in the stack is not overwritten. A small offset is given in the stack after the last memory location used to store data and the stack-guard value stored in fs:28 register is copied into the stack. After the execution of the code or part of the code, the value is the fs:28 register and in the memory location in which we copied to in the beginning is XORed. If the value returns 0, it means the data is safe and unharmed, and if the XOR value is not 0, it means the data in the stack has been corrupted. The -fno-stack-protector flag removes this stack corruption checking code.

12g.

The values in fs:28 were:
0xbef8253bb0cec900
0xe94048c7d7af1c00
0x912e49577076b00
0x8995097e93829400
0xac2d940e3df2e00
fs is a protected register which we directly cannot access. So the value stored in fs is unknown.
[comment by Adwaith]: How did you find out that value of fs cannot be found? 
[changed]: I found an answer in stackoverflow saying that the fs register cannot be accessed directly by us



